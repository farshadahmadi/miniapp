// Code generated by go-swagger; DO NOT EDIT.

package feature

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FeatureFlagHandlerFunc turns a function with the right signature into a feature flag handler
type FeatureFlagHandlerFunc func(FeatureFlagParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FeatureFlagHandlerFunc) Handle(params FeatureFlagParams) middleware.Responder {
	return fn(params)
}

// FeatureFlagHandler interface for that can handle valid feature flag params
type FeatureFlagHandler interface {
	Handle(FeatureFlagParams) middleware.Responder
}

// NewFeatureFlag creates a new http.Handler for the feature flag operation
func NewFeatureFlag(ctx *middleware.Context, handler FeatureFlagHandler) *FeatureFlag {
	return &FeatureFlag{Context: ctx, Handler: handler}
}

/*FeatureFlag swagger:route POST /feature/{feature} feature featureFlag

For requesting feature flag data.

*/
type FeatureFlag struct {
	Context *middleware.Context
	Handler FeatureFlagHandler
}

func (o *FeatureFlag) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFeatureFlagParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
