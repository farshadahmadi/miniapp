// Code generated by go-swagger; DO NOT EDIT.

package feature

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/farshadahmadi/miniapp/internal/generated/swagger/server/miniapp/model"
)

// FeatureFlagOKCode is the HTTP code returned for type FeatureFlagOK
const FeatureFlagOKCode int = 200

/*FeatureFlagOK History request success

swagger:response featureFlagOK
*/
type FeatureFlagOK struct {

	/*
	  In: Body
	*/
	Payload *model.FeatureFlagResponse `json:"body,omitempty"`
}

// NewFeatureFlagOK creates FeatureFlagOK with default headers values
func NewFeatureFlagOK() *FeatureFlagOK {

	return &FeatureFlagOK{}
}

// WithPayload adds the payload to the feature flag o k response
func (o *FeatureFlagOK) WithPayload(payload *model.FeatureFlagResponse) *FeatureFlagOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the feature flag o k response
func (o *FeatureFlagOK) SetPayload(payload *model.FeatureFlagResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FeatureFlagOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// FeatureFlagUnauthorizedCode is the HTTP code returned for type FeatureFlagUnauthorized
const FeatureFlagUnauthorizedCode int = 401

/*FeatureFlagUnauthorized 401 Unauthorized

swagger:response featureFlagUnauthorized
*/
type FeatureFlagUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *model.UnauthorizedResponse `json:"body,omitempty"`
}

// NewFeatureFlagUnauthorized creates FeatureFlagUnauthorized with default headers values
func NewFeatureFlagUnauthorized() *FeatureFlagUnauthorized {

	return &FeatureFlagUnauthorized{}
}

// WithPayload adds the payload to the feature flag unauthorized response
func (o *FeatureFlagUnauthorized) WithPayload(payload *model.UnauthorizedResponse) *FeatureFlagUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the feature flag unauthorized response
func (o *FeatureFlagUnauthorized) SetPayload(payload *model.UnauthorizedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FeatureFlagUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// FeatureFlagInternalServerErrorCode is the HTTP code returned for type FeatureFlagInternalServerError
const FeatureFlagInternalServerErrorCode int = 500

/*FeatureFlagInternalServerError 500 Internal server error

swagger:response featureFlagInternalServerError
*/
type FeatureFlagInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *model.InternalServerErrorResponse `json:"body,omitempty"`
}

// NewFeatureFlagInternalServerError creates FeatureFlagInternalServerError with default headers values
func NewFeatureFlagInternalServerError() *FeatureFlagInternalServerError {

	return &FeatureFlagInternalServerError{}
}

// WithPayload adds the payload to the feature flag internal server error response
func (o *FeatureFlagInternalServerError) WithPayload(payload *model.InternalServerErrorResponse) *FeatureFlagInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the feature flag internal server error response
func (o *FeatureFlagInternalServerError) SetPayload(payload *model.InternalServerErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FeatureFlagInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// FeatureFlagServiceUnavailableCode is the HTTP code returned for type FeatureFlagServiceUnavailable
const FeatureFlagServiceUnavailableCode int = 503

/*FeatureFlagServiceUnavailable 503 Service Unavailable

swagger:response featureFlagServiceUnavailable
*/
type FeatureFlagServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *model.ServiceUnavailableResponse `json:"body,omitempty"`
}

// NewFeatureFlagServiceUnavailable creates FeatureFlagServiceUnavailable with default headers values
func NewFeatureFlagServiceUnavailable() *FeatureFlagServiceUnavailable {

	return &FeatureFlagServiceUnavailable{}
}

// WithPayload adds the payload to the feature flag service unavailable response
func (o *FeatureFlagServiceUnavailable) WithPayload(payload *model.ServiceUnavailableResponse) *FeatureFlagServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the feature flag service unavailable response
func (o *FeatureFlagServiceUnavailable) SetPayload(payload *model.ServiceUnavailableResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FeatureFlagServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// FeatureFlagGatewayTimeoutCode is the HTTP code returned for type FeatureFlagGatewayTimeout
const FeatureFlagGatewayTimeoutCode int = 504

/*FeatureFlagGatewayTimeout 504 Gateway Timeout

swagger:response featureFlagGatewayTimeout
*/
type FeatureFlagGatewayTimeout struct {

	/*
	  In: Body
	*/
	Payload *model.GatewayTimeoutResponse `json:"body,omitempty"`
}

// NewFeatureFlagGatewayTimeout creates FeatureFlagGatewayTimeout with default headers values
func NewFeatureFlagGatewayTimeout() *FeatureFlagGatewayTimeout {

	return &FeatureFlagGatewayTimeout{}
}

// WithPayload adds the payload to the feature flag gateway timeout response
func (o *FeatureFlagGatewayTimeout) WithPayload(payload *model.GatewayTimeoutResponse) *FeatureFlagGatewayTimeout {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the feature flag gateway timeout response
func (o *FeatureFlagGatewayTimeout) SetPayload(payload *model.GatewayTimeoutResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FeatureFlagGatewayTimeout) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(504)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*FeatureFlagDefault Default response

swagger:response featureFlagDefault
*/
type FeatureFlagDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *model.DefaultResponse `json:"body,omitempty"`
}

// NewFeatureFlagDefault creates FeatureFlagDefault with default headers values
func NewFeatureFlagDefault(code int) *FeatureFlagDefault {
	if code <= 0 {
		code = 500
	}

	return &FeatureFlagDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the feature flag default response
func (o *FeatureFlagDefault) WithStatusCode(code int) *FeatureFlagDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the feature flag default response
func (o *FeatureFlagDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the feature flag default response
func (o *FeatureFlagDefault) WithPayload(payload *model.DefaultResponse) *FeatureFlagDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the feature flag default response
func (o *FeatureFlagDefault) SetPayload(payload *model.DefaultResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FeatureFlagDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
